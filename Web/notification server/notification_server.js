// Gerekli modÃ¼ller yÃ¼kleniyor
const express = require('express'); // Web sunucusu oluÅŸturmak iÃ§in
const admin = require('firebase-admin'); // Firebase Admin SDK (Push bildirim gÃ¶ndermek iÃ§in)
const fs = require('fs'); // Dosya okuma/yazma iÅŸlemleri
const path = require('path'); // Dosya ve dizin yollarÄ±nÄ± yÃ¶netmek iÃ§in

// Firebase servis hesabÄ± bilgilerini iÃ§eren dosya
const serviceAccount = require(path.resolve(__dirname, 'service_account.json'));

// Firebase Admin SDK baÅŸlatÄ±lÄ±yor
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
});

const app = express();
app.use(express.json()); // JSON formatÄ±ndaki istekleri parse etmek iÃ§in (body-parser yerine)

// Public klasÃ¶rÃ¼nÃ¼ statik olarak sunma (HTML, CSS, JS dosyalarÄ± buradan servis edilir)
app.use(express.static(path.join(__dirname, 'public')));

// TokenlarÄ±n kayÄ±tlÄ± tutulduÄŸu dosya
const TOKEN_FILE = path.resolve(__dirname, 'tokens.json');

// TokenlarÄ± bellekte set olarak saklamak (benzersiz olmasÄ± iÃ§in)
let deviceTokens = new Set();

// Sunucu baÅŸlatÄ±lÄ±rken daha Ã¶nce kayÄ±tlÄ± tokenlar dosyadan yÃ¼kleniyor
if (fs.existsSync(TOKEN_FILE)) {
  deviceTokens = new Set(JSON.parse(fs.readFileSync(TOKEN_FILE, 'utf8')));
}

// TokenlarÄ± dosyaya kaydetme fonksiyonu
function saveTokens() {
  fs.writeFileSync(TOKEN_FILE, JSON.stringify(Array.from(deviceTokens), null, 2));
}

// ðŸ”¹ Token kayÄ±t endpointâ€™i
app.post('/registerToken', (req, res) => {
  const token = req.body.token;
  if (token && !deviceTokens.has(token)) {
    deviceTokens.add(token); // Yeni token setâ€™e eklenir
    saveTokens(); // Dosyaya kaydedilir
    console.log('Yeni token kaydedildi:', token);
    res.status(200).send({ message: 'Token kaydedildi' });
  } else {
    res.status(400).send({ message: 'Token eksik veya zaten kayÄ±tlÄ±' });
  }
});

// ðŸ”¹ Bildirim gÃ¶nderme endpointâ€™i
app.post('/sendNotification', async (req, res) => {
  const { title, body, image } = req.body;

  // Zorunlu alan kontrolÃ¼
  if (!title || !body) {
    return res.status(400).send({ message: 'title ve body zorunlu' });
  }

  // Bildirim iÃ§eriÄŸi oluÅŸturma
  const messagePayload = {
    notification: { title, body, ...(image && { image }) },
    data: { title, body, image: image || "" },
    android: {
      priority: "high",
      notification: {
        channel_id: "default_channel",
        sound: "default",
        ...(image && { image }),
      },
    },
    apns: {
      payload: { aps: { sound: "default" } },
      ...(image && { fcm_options: { image } }),
    },
  };

  try {
    // KayÄ±tlÄ± tÃ¼m cihazlara bildirim gÃ¶nder
    for (const token of deviceTokens) {
      const message = { ...messagePayload, token };
      const response = await admin.messaging().send(message);
      console.log(`Bildirim gÃ¶nderildi: ${response} -> Token: ${token}`);
    }
    res.status(200).send({ message: "Bildirimler gÃ¶nderildi" });
  } catch (error) {
    console.error("Bildirim gÃ¶nderme hatasÄ±:", error);
    res.status(500).send({ error: "Bildirim gÃ¶nderilemedi" });
  }
});

// Sunucuyu baÅŸlat
const PORT = 8080;
app.listen(PORT, () => {
  console.log(`Server ${PORT} portunda Ã§alÄ±ÅŸÄ±yor.`);
});
